@page "/LoginPage"
@using CustomAuthentication
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="full-page">
    <div class="login-container">
        <h3 style="font-weight: bold">Login</h3>
        <div>
            <label for="username">Username:</label>
            <input type="text" id="username" @bind="Username"/>
        </div>
        <div>
            <label for="password">Password:</label>
            <input type="password" id="password" @bind="Password"/>
        </div>
        <div>
            <button style="font-weight: bold" @onclick="Login">Login</button>
        </div>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <p style="color: red;">@ErrorMessage</p>
        }
    </div>
</div>

@code {
    string Username { get; set; }
    string Password { get; set; }
    string ErrorMessage { get; set; }
    private bool isFirstRender = true;
    private string tokenToSetInLocalStorage = null;

    private async Task Login()
    {
        var client = HttpClientFactory.CreateClient("NoSSL");

        var loginRequest = new
        {
            Username = this.Username,
            Password = this.Password
        };

        var response = await client.PostAsJsonAsync("User/login", loginRequest);

        if (response.IsSuccessStatusCode)
        {
            // Get the token for subsequent requests
            var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();
            if (tokenResponse != null)
            {
                tokenToSetInLocalStorage = tokenResponse.Token;

                // Notify the authentication state provider of the change in authentication state
                var customAuthState = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
                customAuthState.MarkUserAsAuthenticated(loginRequest.Username);
            }

            ErrorMessage = "";
            NavigationManager.NavigateTo("/");
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            ErrorMessage = "Invalid username or password.";
        }
        else
        {
            ErrorMessage = "An unexpected error occurred.";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isFirstRender)
        {
            await SetTokenInLocalStorageIfAvailable();
            isFirstRender = false;
        }
    }

    private async Task SetTokenInLocalStorageIfAvailable()
    {
        if (!string.IsNullOrEmpty(tokenToSetInLocalStorage))
        {
            await localStorageService.SetItemAsync("ThisIsASuperSecureSecretKey32Char", tokenToSetInLocalStorage);
            tokenToSetInLocalStorage = null; // Clear it after setting.
        }
    }

    private record TokenResponse(string Token);
}
