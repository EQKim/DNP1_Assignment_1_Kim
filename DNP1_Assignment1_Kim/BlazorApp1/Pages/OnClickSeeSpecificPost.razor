@page "/comments/{PostId:int}"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation


<h3>@post?.title</h3>
@if (post == null)
{
    <p>Loading post...</p>
}
else
{
    <div class="post-content">
        @if (IsGifUrl(post.context))
        {
            <img src="@post.context" alt="GIF Content" class="gif-in-container"/>
        }
        else
        {
            <p>@post.context</p>
        }
    </div>
    <h4>Comments</h4>
    @if (comments == null)
    {
        <p>Loading comments...</p>
    }
    else if (!comments.Any())
    {
        <p>No comments found for this post.</p>
    }
    else
    {
        foreach (var comment in comments)
        {
            <div class="comment-container">@comment.CommentText</div>
        }
    }

    <div class="add-comment-section">
        <textarea @bind="newComment" placeholder="Add a comment..."></textarea>
        <button @onclick="AddComment">Submit Comment</button>
    </div>
}

@code {

    [Parameter]
    public int PostId { get; set; }

    private Post post;
    private List<Comment> comments;
    private string newComment;

    protected override async Task OnInitializedAsync()
    {
        await LoadPostAndComments();
    }

    private async Task LoadPostAndComments()
    {
        var client = HttpClientFactory.CreateClient("NoSSL");
    
    // Fetching the post
        var postResponse = await client.GetAsync($"Post/GetById?id={PostId}");
        if (postResponse.IsSuccessStatusCode)
        {
            post = await postResponse.Content.ReadFromJsonAsync<Post>();
        }
        else
        {
            if (postResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Console.WriteLine($"Post with ID {PostId} not found.");
                Navigation.NavigateTo("/NotFound"); // Redirect to a 404 page or any other page you want
                return; // Return here to prevent further processing since the post is not found
            }
            else
            {
                Console.WriteLine($"Error fetching post. HTTP Status: {postResponse.StatusCode}");
                return; // Stop the method if the post fetching failed
            }
        }

    // Continue to fetch the comments for the post (Existing code remains unchanged here)
        var commentsResponse = await client.GetAsync($"Comment/ByPost?postId={PostId}");
        if (commentsResponse.IsSuccessStatusCode)
        {
            if (commentsResponse.StatusCode != System.Net.HttpStatusCode.NoContent)
            {
                comments = await commentsResponse.Content.ReadFromJsonAsync<List<Comment>>();
            }
            else
            {
                Console.WriteLine("No comments found for this post.");
                comments = new List<Comment>();  // Initialize the comments list as empty
            }
        }
        else
        {
            Console.WriteLine($"Error fetching comments. HTTP Status: {commentsResponse.StatusCode}");
        }
    }




    private async Task AddComment()
    {
        if (string.IsNullOrWhiteSpace(newComment))
            return;

    // Assume an API endpoint "Comment/Create" to add new comment
        try
        {
            var client = HttpClientFactory.CreateClient("NoSSL");
            var commentToAdd = new Comment { CommentText = newComment, PostId = PostId };
            var response = await client.PostAsJsonAsync("Comment/Create", commentToAdd);

            if (response.IsSuccessStatusCode)
            {
                comments.Add(commentToAdd);
                newComment = ""; // Clear the text area after successful submission
            }
            else
            {
                Console.WriteLine("Error while adding comment: " + await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error while adding comment: " + e.Message);
        }
    }

    private bool IsGifUrl(string context)
    {
        if (string.IsNullOrWhiteSpace(context))
        {
            return false;
        }
        return (context.StartsWith("http://") || context.StartsWith("https://")) && context.EndsWith(".gif");
    }

    public class Post
    {
        public int ID { get; set; }
        public string title { get; set; }
        public string context { get; set; }
    }

    public class Comment
    {
        public int CommentId { get; set; }
        public string CommentText { get; set; }
        public int PostId { get; set; }
    }

}