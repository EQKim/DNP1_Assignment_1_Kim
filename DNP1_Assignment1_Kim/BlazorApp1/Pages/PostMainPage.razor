@page "/"
@inject IHttpClientFactory HttpClientFactory

<div class="header">
    <h3 style="font-weight: bold;">Posts</h3>
    <div>
        <input type="text" class="search-input" @bind="searchTerm" placeholder="Search by title..."/>
        <button @onclick="SearchPosts">Search</button>
    </div>
</div>

<div class="posts-container">
    @if (posts == null)
    {
        <p>Loading posts...</p>
    }
    else if (posts.Length == 0)
    {
        <p>No posts found.</p>
    }
    else
    {
        @foreach (var post in posts)
        {
            <div class="post-container">
                <h4>@post.title</h4>

               @if (IsGifUrl(post.context))
               {
                   <img src="@post.context" alt="GIF Content" class="gif-in-container" />
               }
               else
               {
                   <p>@post.context</p>
               }


                <button @onclick="() => LoadComments(post)" class="see-comments-btn">See Comments</button>
                <!-- Placeholder for displaying comments -->
                @if (post.Comments != null && post.Comments.Any())
                {
                    <ul>
                        @foreach (var comment in post.Comments)
                        {
                            <li>@comment</li>
                        }
                    </ul>
                }
            </div>
        }
    }
</div>

@code {
    private Post[] posts;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadAllPosts();
    }

    private async Task LoadAllPosts()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("NoSSL");
            posts = await client.GetFromJsonAsync<Post[]>("Post");
        }
        catch (Exception e)
        {
            Console.WriteLine("Error while fetching posts: " + e.Message);
            if (e.InnerException != null)
            {
                Console.WriteLine("Inner exception: " + e.InnerException);
            }
        }
    }

    private async Task SearchPosts()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadAllPosts();
        }
        else
        {
            try
            {
                var client = HttpClientFactory.CreateClient("NoSSL");
                posts = await client.GetFromJsonAsync<Post[]>($"Post/ByTitle?title={searchTerm}");
            }
            catch (Exception e)
            {
                Console.WriteLine("Error while fetching posts: " + e.Message);
                if (e.InnerException != null)
                {
                    Console.WriteLine("Inner exception: " + e.InnerException);
                }
            }
        }
    }

    private bool IsGifUrl(string context)
    {
        if (string.IsNullOrWhiteSpace(context))
        {
            return false;
        }
        return (context.StartsWith("http://") || context.StartsWith("https://")) && context.EndsWith(".gif");
    }

    private void LoadComments(Post post)
    {
    // Here, you would load comments for the given post.
    // This is just a mock for demonstration purposes.
        post.Comments = new[] { "This is a comment!", "Another comment here." };
    }

    public class Post
    {
        public int ID { get; set; }
        public string title { get; set; }
        public string context { get; set; }
        public string[] Comments { get; set; } // Assuming comments are strings for this example.
    }

}