@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using CustomAuthentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager

<PageTitle>BlazorApp1</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>

    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <NavLink class="custom-nav-linkV2" href="">
                        <img src="UserIcon.png" alt="User Icon" class="login-image"/>
                        @username
                    </NavLink>

                    <button class="custom-nav-linkV2" @onclick="LogoutAsync">
                        <img src="LogoutIconV2.png" alt="Logout Icon" class="login-image"/>
                        Logout
                    </button>
                </Authorized>

                <NotAuthorized>
                    <NavLink class="custom-nav-link" href="LoginPage">
                        <img src="LoginIcon.png" alt="Login Icon" class="login-image"/>
                        Login
                    </NavLink>

                    <NavLink class="custom-nav-link" href="CreateUserPage">
                        <img src="CreateUserIcon.png" alt="Create User Icon" class="login-image"/>
                        Create User
                    </NavLink>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private string username = "Loading...";
    private HttpClient Http => HttpClientFactory.CreateClient("NoSSL");

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            // Diagnostic logs:
            Console.WriteLine($"IsAuthenticated: {state.User.Identity.IsAuthenticated}");
            Console.WriteLine($"UserName: {state.User.Identity.Name}");

            if (state.User.Identity.IsAuthenticated)
            {
                username = state.User.Identity.Name ?? "Unknown";
            }
            else
            {
                Console.WriteLine("User is not authenticated. Checking local storage for token...");
                var token = await LocalStorageService.GetItemAsync<string>("ThisIsASuperSecureSecretKey32Char");
                
                if (!string.IsNullOrEmpty(token))
                {
                    Console.WriteLine($"Token found in local storage: {token}");
                }
                else
                {
                    Console.WriteLine("No token found in local storage.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing component: {ex.Message}");
        }
    }

    private async Task LogoutAsync()
    {
        try
        {
            var response = await Http.PostAsync("User/Logout", null);

            if (response.IsSuccessStatusCode)
            {
                await LocalStorageService.RemoveItemAsync("ThisIsASuperSecureSecretKey32Char");

                var customAuthState = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
                customAuthState.MarkUserAsLoggedOut();

                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                Console.WriteLine("Error logging out.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error logging out: {ex.Message}");
        }
    }
}
